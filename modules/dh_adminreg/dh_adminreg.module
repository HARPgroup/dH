<?php

//Implement hook_entity_info().

function dh_adminreg_entity_info() {

  $return['dh_adminreg_feature_type'] = array(
    'label' => t('dH AdminReg Feature Type'),
    'entity class' => 'dHAdminRegFeatureType',
    'controller class' => 'dHAdminRegFeatureTypeController',
    'base table' => 'dh_adminreg_feature_type',
    'fieldable' => TRUE,
	  'bundle of' => 'dh_adminreg_feature',
    'bundles' => array(),
    'bundle keys' => array( 
    ),
    'exportable' => TRUE,
    'entity keys' => array (
	     'name' => 'bundle',
        'id' => 'fid',
        'label' => 'name',
    ),
    'access callback' => 'dh_adminreg_feature_access',
    'module' => 'dh_adminreg',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/dh_adminreg_feature_type',
      'file' => 'dh_adminreg.admin.inc',
      'controller class' => 'dHAdminRegFeatureTypeUIController',
    ),
  );

  $return['dh_adminreg_feature'] = array(
    'label' => t('dH AdminReg Feature'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'dHAdminRegFeature',
    'controller class' => 'dHAdminRegFeatureController',
    'base table' => 'dh_adminreg_feature',
    'fieldable' => TRUE,
    //'exportable' => TRUE,
	  'entity keys' => array(
      'id' => 'adminid',
	    'bundle' => 'bundle',
	    'label' => 'name'
    ),
    // Bundles are defined by the model types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array( 
	    'bundle' => 'bundle'
    ),
    //'label callback' => 'entity_class_label',
    // 'uri callback' was commented - try now to see if entity can handle?
    'uri callback' => 'entity_class_uri',
    'access callback' => 'dh_adminreg_feature_access',
    'module' => 'dh_adminreg',
    // The information below is used by EntityDefaultUIController
    'admin ui' => array(
      'path' => 'admin/content/dh_adminreg_feature',
      'file' => 'dh_adminreg.admin.inc',
      'controller class' => 'dHAdminRegFeatureUIController',
      //'menu wildcard' => '%dh_feature',
    ),
  );

  if (db_table_exists('dh_adminreg_contact_type')) {
  $return['dh_adminreg_contact_type'] = array(
    'label' => t('dH AdminReg Contact Type'),
    'entity class' => 'dHAdminRegContactType',
    'controller class' => 'dHAdminRegContactTypeController',
    'base table' => 'dh_adminreg_contact_type',
    'fieldable' => TRUE,
    'bundle of' => 'dh_adminreg_contact',
    'bundles' => array(),
    'bundle keys' => array( 
    ),
    'exportable' => TRUE,
    'entity keys' => array (
       'name' => 'bundle',
        'id' => 'arctid',
        'label' => 'name',
    ),
    'access callback' => 'dh_feature_access',
    'module' => 'dh_adminreg',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/dh_adminreg_contact_type',
      'file' => 'dh_adminreg.admin.inc',
      'controller class' => 'dHAdminRegContactTypeUIController',
    ),
  );
  }

  $return['dh_adminreg_contact'] = array(
    'label' => t('dH AdminReg Contact'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'dHAdminRegContact',
    'controller class' => 'dHAdminRegContactController',
    'base table' => 'dh_adminreg_contact',
    'fieldable' => TRUE,
    //'exportable' => TRUE,
	  'entity keys' => array(
      'id' => 'contactid',
	    'bundle' => 'bundle',
	    'label' => 'name'
    ),
    // Bundles are defined by the model types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array( 
	    'bundle' => 'bundle'
    ),
    //'label callback' => 'entity_class_label',
    //'uri callback' => 'entity_class_uri',
    'access callback' => 'dh_adminreg_contact_access',
    'module' => 'dh_adminreg',
    // The information below is used by EntityDefaultUIController
    'admin ui' => array(
      'path' => 'admin/content/dh_adminreg_contact',
      'file' => 'dh_adminreg.admin.inc',
      'controller class' => 'dHAdminRegContactUIController',
      //'menu wildcard' => '%dh_feature',
    ),
  );
  
  return $return;
}


function dh_adminreg_menu() {
  $items = array();
  return $items;
}

function dh_adminreg_contact_access($op, $task, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
//  error_log("dh_adminreg_contact_access called with $op, " 
//    . print_r((array)$task,1) 
//    . print_r((array)$account,1) 
//    . ", $entity_type"
//  );
  switch ($op) {
    case 'create':
    return user_access('administer dh_adminreg_contact entities', $account)
        || user_access('create dh_adminreg_contact entities', $account);
    case 'view':
    return user_access('administer dh_adminreg_contact entities', $account)
        || user_access('view any dh_adminreg_contact entities', $account)
        || user_access('view own dh_adminreg_contact entities', $account);
    case 'delete':
    return user_access('administer dh_adminreg_contact entities', $account)
        || user_access('delete any dh_adminreg_contact entities', $account)
        || user_access('edit any dh_adminreg_contact entities')
        || user_access('delete own dh_adminreg_contact entities', $account);
    case 'edit':
    case 'update':
    return user_access('administer dh_adminreg_contact entities')
        || user_access('edit any dh_adminreg_contact entities')
        || (user_access('edit own dh_adminreg_contact entities') && ($task->uid == $account->uid));
  }
}

function dh_adminreg_feature_access($op, $task, $account = NULL, $entity_type = NULL) {
  global $user;
  //dpm($op, 'arg 1');
  //dpm($task, 'arg2');
  //dpm($account, 'arg3');
  //dpm(  $entity_type, 'arg 4');
  if (!isset($account)) {
    $account = $user;
  }
  //  error_log("dh_adminreg_feature_access called with $op, " 
  //    . print_r((array)$task,1) 
  //    . print_r((array)$account,1) 
  //    . ", $entity_type"
  //  );
  $is_manager = FALSE;
  if (is_object($task)) {
    // check for fh features referenced by submittals
    //dpm($task,'ar event');
    $erefs = dh_get_entity_erefs($task, 'dh_link_feature_submittal');
    //dpm($erefs,'erefs');
    while (!$is_manager and $eid = array_shift($erefs)) {
      // check until we run out of links or we find one that implies management
      $is_manager = dh_check_user_mgmt_tree($account->uid, 'dh_feature', $eid);
    }
    //dpm($is_manager, "last perm check $eid");
    //drupal_set_message("last perm check $eid = $is_manager");
  }
  switch ($op) {
    case 'create':
    return user_access('administer dh_adminreg_feature entities', $account)
        || user_access('create dh_adminreg_feature entities', $account);
    case 'view':
    return user_access('administer dh_adminreg_feature entities', $account)
        || user_access('view any dh_adminreg_feature entities', $account) 
        || user_access('view own dh_adminreg_feature entities', $account)
        || $is_manager;
    case 'delete':
    return user_access('administer dh_adminreg_feature entities', $account)
        || user_access('delete any dh_adminreg_feature entities', $account)
        || user_access('delete own dh_adminreg_feature entities', $account)
        || $is_manager;
    case 'edit':
    case 'update':
    return user_access('administer dh_adminreg_feature entities')
        || user_access('edit any dh_adminreg_feature entities')
        || (user_access('edit own dh_adminreg_feature entities') && ($task->uid == $account->uid))
        || $is_manager;
  }
}

function dh_adminreg_permission_linked($op, $task, $account, $entity_type) {
  
  $features = dh_get_user_mgr_features($account);
}

function dh_adminreg_permission() {
  
  $permissions = array(
    'create dh_adminreg_feature entities' => array(
      'title' => t('Create dH Adminreg Features'),
      'description' => t('Allows users to create dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'view dh_adminreg_feature entities' => array(
      'title' => t('View dH Adminreg Features'),
      'description' => t('Allows users to view dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'view any dh_adminreg_feature entities' => array(
      'title' => t('View ANY dH Adminreg Features'),
      'description' => t('Allows users unrestricted access to view dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'edit any dh_adminreg_feature entities' => array(
      'title' => t('Edit any dH Adminreg Features'),
      'description' => t('Allows users to edit any dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'edit own dh_adminreg_feature entities' => array(
      'title' => t('Edit own dH Adminreg Features'),
      'description' => t('Allows users to edit own dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'delete any dh_adminreg_feature entities' => array(
      'title' => t('Edit any dH Adminreg Features'),
      'description' => t('Allows users to delete any dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'delete own dh_adminreg_feature entities' => array(
      'title' => t('Edit own dH Adminreg Features'),
      'description' => t('Allows users to delete own dH Adminreg Features.'),
      'restrict access' => FALSE,
    ),
    'view any dh_adminreg_contact entities' => array(
      'title' => t('View any dH Adminreg Contacts'),
      'description' => t('Allows users to view dH Adminreg Contacts.'),
      'restrict access' => FALSE,
    ),
    'edit any dh_adminreg_contact entities' => array(
      'title' => t('Edit any dH Adminreg Contacts'),
      'description' => t('Allows users to edit any dH Adminreg Contacts.'),
      'restrict access' => FALSE,
    ),
    'view own dh_adminreg_contact entities' => array(
      'title' => t('View own dH Adminreg Contacts'),
      'description' => t('Allows users to view dH Adminreg Contacts.'),
      'restrict access' => FALSE,
    ),
    'edit own dh_adminreg_contact entities' => array(
      'title' => t('Edit own dH Adminreg Contacts'),
      'description' => t('Allows users to edit own dH Adminreg Contacts.'),
      'restrict access' => FALSE,
    ),
  );
  
  //Generate permissions per feature type 
  foreach (dh_adminreg_feature_get_types() as $type) {
    $type_name = check_plain($type->bundle);
    $permissions += array(
      "edit any $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: Edit any feature', array('%type_name' => $type->name)),
      ),
      "edit own $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: Edit own feature', array('%type_name' => $type->name)),
      ),
      "view any $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: View any feature', array('%type_name' => $type->name)),
      ),
      "view own $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: View own feature', array('%type_name' => $type->name)),
      ),
      "delete own $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: Delete own feature', array('%type_name' => $type->name)),
      ),
      "delete any $type_name dh_adminreg_feature" => array(
        'title' => t('%type_name: Delete any feature', array('%type_name' => $type->name)),
      ),
    );
  }
  //Generate permissions per contact type 
  foreach (dh_adminreg_contact_get_types() as $type) {
    $type_name = check_plain($type->bundle);
    $permissions += array(
      "edit any $type_name dh_adminreg_contact" => array(
        'title' => t('%type_name: Edit any contact', array('%type_name' => $type->name)),
      ),
      "edit own $type_name dh_adminreg_contact" => array(
        'title' => t('%type_name: Edit own contact', array('%type_name' => $type->name)),
      ),
      "view any $type_name dh_adminreg_contact" => array(
        'title' => t('%type_name: View any contact', array('%type_name' => $type->name)),
      ),
      "view own $type_name dh_adminreg_contact" => array(
        'title' => t('%type_name: View own contact', array('%type_name' => $type->name)),
      ),
      "delete any $type_name dh_adminreg_contact" => array(
        'title' => t('%type_name: Delete any contact', array('%type_name' => $type->name)),
      ),
    );
  }
  
  return $permissions;
  
}

function dh_adminreg_entity_info_alter(&$entity_info) {

  foreach (dh_adminreg_feature_get_types() as $type => $info) {
    $entity_info['dh_adminreg_feature']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/dh_adminreg_feature_type/manage/%dh_adminreg_feature_type',
        'real path' => 'admin/structure/dh_adminreg_feature_type/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer dh_adminreg_feature_type types'),
      ),
    );
  }
  if (db_table_exists('dh_adminreg_contact_type')) {
    foreach (dh_adminreg_contact_get_types() as $type => $info) {
      $entity_info['dh_adminreg_contact']['bundles'][$type] = array(
        'label' => $info->name,
        'admin' => array(
          'path' => 'admin/structure/dh_adminreg_contact_type/manage/%dh_adminreg_contact_type',
          'real path' => 'admin/structure/dh_adminreg_contact_type/manage/' . $type,
          'bundle argument' => 4,
          'access arguments' => array('administer dh_adminreg_contact_type types'),
        ),
      );
    }
  }
}

function dh_adminreg_entity_property_info_alter(&$entity_info) {

  $entity_props = &$entity_info['dh_adminreg_feature']['properties'];
  // set via editable meta-data API
  $settable_ts = array('startdate' => 'date', 'enddate' => 'date', 'name' => 'text', 'fstatus' => 'text', 'description' => 'text', 'fstatus' => 'text', 'ftype' => 'text', 'admincode' => 'text');
  foreach ($settable_ts as $thiscol => $thistype) {
    $entity_props[$thiscol]['setter callback'] = 'entity_property_verbatim_set';
    $entity_props[$thiscol]['getter callback'] = 'entity_property_verbatim_get';
    $entity_props[$thiscol]['setter permission'] = 'edit own dh_adminreg_feature entities';
    //$entity_props[$thiscol]['type'] = $thistype;
    $entity_props[$thiscol]['schema field'] = $thiscol;
    $entity_props[$thiscol]['label'] = t($thiscol);
  }
  
  // contact editables
  $entity_props = &$entity_info['dh_adminreg_contact']['properties'];
  // set via editable meta-data API
  //$settable_ts = array('admincode', 'ftype', 'name', 'firstname', 'lastname', 'address1', 'address2', 'city', 'state', 'postal_code', 'phone', 'email', 'uri', 'modified', 'fstatus');
  foreach ($settable_ts as $thiscol) {
    $entity_props[$thiscol]['setter callback'] = 'entity_property_verbatim_set';
    $entity_props[$thiscol]['getter callback'] = 'entity_property_verbatim_get';
    $entity_props[$thiscol]['setter permission'] = 'administer dh_feature entities';
    $entity_props[$thiscol]['type'] = 'user';
    $entity_props[$thiscol]['schema field'] = $thiscol;
    $entity_props[$thiscol]['label'] = t($thiscol);
  }
}

function dh_adminreg_feature_get_types($bundle_name = NULL) {
  // entity_load will get the Entity controller for our model entity and call the load
  // function of that object - we are loading entities by name here.
  $bundles = entity_load_multiple_by_name('dh_adminreg_feature_type', isset($bundle_name) ? array($bundle_name) : FALSE);
  return isset($bundle_name) ? reset($bundles) : $bundles;
}

function dh_adminreg_feature_type_load($bundle) {
  return dh_adminreg_feature_get_types($bundle);
}


function dh_adminreg_contact_get_types($bundle_name = NULL) {
  // entity_load will get the Entity controller for our model entity and call the load
  // function of that object - we are loading entities by name here.
  $bundles = entity_load_multiple_by_name('dh_adminreg_contact_type', isset($bundle_name) ? array($bundle_name) : FALSE);
  return isset($bundle_name) ? reset($bundles) : $bundles;
}

function dh_adminreg_contact_type_load($bundle) {
  return dh_adminreg_contact_get_types($bundle);
}

//****************************
// ADminReg Feature
//****************************

class dHAdminRegFeature extends dHBaseEntity {
  
  public $is_new;
  public $bundle;
  public $name;
  public $adminid;
  public $admincode;
  public $ftype;
  public $modified;
  public $startdate;
  public $enddate;
  public $fstatus;
  public $uid;
  
  public function __construct($values = array()) {
    $timecols = array('startdate', 'enddate', 'modified', 'date_received');
    foreach ($timecols as $thiscol) {
      $field_arr = 0;
      if (isset($values[$thiscol])) {
        if (is_array($values[$thiscol])) {
          //drupal_set_message("$thiscol field: " . print_r($values[$thiscol],1));
          $field_arr = 1;
          $field_cache = $values[$thiscol];
          $lang = min(array_keys($field_cache));
          $values[$thiscol] = $field_cache[$lang][0]['value'];
        }
        if ($values[$thiscol] <> '') {
          // if a valid unix epoch style timestamp has been submitted 
          // this next comparator will return TRUE
          $values[$thiscol] = dh_handletimestamp($values[$thiscol]);
          //drupal_set_message("$thiscol dh_handletimestamp called: " . $values[$thiscol]);
        }
        if ($field_arr) {
          //drupal_set_message("$thiscol converted to: " . $values[$thiscol]);
          $field_cache[$lang][0]['value'] = $values[$thiscol];
          //drupal_set_message("$thiscol field: " . print_r($values[$thiscol],1));
          $values[$thiscol] = $field_cache;
        }
      }
      if (!isset($values['modified'])) {
        $values['modified'] = date('U');
      }
    }
    parent::__construct($values, 'dh_adminreg_feature');
  }
  protected function defaultLabel() {
    return $this->name;
  }
  protected function defaultUri() {
    $path = 'admin/content/dh_adminreg_feature/manage/' . $this->identifier() . '/view';
    return array('path' => $path);
  }
}

class dHAdminRegFeatureController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array( 
      'adminid' => '',
      'admincode' => '',
      'bundle' => '',
      'ftype' => '',
      'name' => '',
      'modified' => '',
      'startdate' => '',
      'enddate' => '',
      'fstatus' => '',
    );
    $feature_type = parent::create($values);
    return $feature_type;
  }
  

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    global $user;
    $entity->uid = $user->uid;
    // don't do date_received as this is a field and is handled there
    $timecols = array('startdate', 'enddate', 'modified');
    foreach ($timecols as $thiscol) {
      $field_arr = 0;
      //drupal_set_message("Looking for $thiscol on entity: " . print_r((array)$entity,1));
      if (property_exists($entity, $thiscol)) {
        if (is_array($entity->$thiscol)) {
          //drupal_set_message("Found ");
          //drupal_set_message("$thiscol field: " . print_r($entity->$thiscol,1));
          $field_arr = 1;
          $field_cache = $entity->$thiscol;
          $lang = min(array_keys($field_cache));
          $entity->$thiscol = $field_cache[$lang][0]['value'];
        }
        if ($entity->$thiscol <> '') {
          // if a valid unix epoch style timestamp has been submitted 
          // this next comparator will return TRUE
          $entity->$thiscol = dh_handletimestamp($entity->$thiscol);
        }
        if ($field_arr) {
          //drupal_set_message("$thiscol converted to: " . $entity->$thiscol);
          $field_cache[$lang][0]['value'] = $entity->$thiscol;
          //drupal_set_message("$thiscol field: " . print_r($entity->$thiscol,1));
          $entity->$thiscol = $field_cache;
        }
      }
      if (!isset($entity->modified) or empty($entity->modified)) {
         $entity->modified = date('U');
      }
    }
    return parent::save($entity, $transaction);
  }
}

//****************************
// Feature Type
//****************************

class dHAdminRegFeatureType extends Entity {
  
  public $is_new;
  public $bundle;
  public $name;
  public $fid;
  public $description;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'dh_adminreg_feature_type');
  }
  protected function defaultLabel() {
    return $this->name;
  }

}

class dHAdminRegFeatureTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a model type - we first set up the values that are specific
   * to our model type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the model.
   *
   * @return
   *   A model type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array( 
      'fid' => '',
      'label' => '',
      'name' => '',
    );
    $feature_type = parent::create($values);
    return $feature_type;
  }

}


//****************************
// ADminReg Contact
//****************************

class dHAdminRegContact extends Entity {
  
  public $is_new;
  public $prefix;
  public $suffix;  
  public $name;
  public $contactid;
  public $admincode;
  public $ftype;
  public $description;
  public $firstname;
  public $lastname;
  public $address1;
  public $address2;
  public $city;
  public $state;
  public $postal_code;
  public $phone;
  public $email;
  public $uri;
  public $bundle;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'dh_adminreg_contact');
  }
  protected function defaultLabel() {
    return $this->name;
  }

}

class dHAdminRegContactController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array( 
      'contactid' => '',
      'admincode' => '',
      'ftype' => '',
      'prefix' => '',
      'suffix' => '',
      'description' => '',
      'firstname' => '',
      'lastname' => '',
      'address1' => '',
      'address2' => '',
      'city' => '',
      'state' => '',
      'postal_code' => '',
      'phone' => '',
      'email' => '',
      'bundle' => '',
      'uri' => '',
    );
    $feature_type = parent::create($values);
    return $feature_type;
  }

}


//****************************
// Contact Type
//****************************

class dHAdminRegContactType extends Entity {
  
  public $is_new;
  public $bundle;
  public $name;
  public $arctid;
  public $description;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'dh_adminreg_contact_type');
  }
  protected function defaultLabel() {
    return $this->name;
  }

}

class dHAdminRegContactTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array( 
      'arctid' => '',
      'label' => '',
      'name' => '',
    );
    $feature_type = parent::create($values);
    return $feature_type;
  }
}


/**
  * ***************************************
  * Hooks and Globally Available Functions
  * ***************************************
  */
function dh_adminreg_get_adminreg_entity($admincode, $bundle = FALSE, $ftype = FALSE) {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'dh_adminreg_feature');
  $efq->propertyCondition('admincode', $admincode, '=');
  if ($bundle) $efq->propertyCondition('bundle', $bundle, '=');
  if ($ftype) $efq->propertyCondition('ftype', $ftype, '=');
  $rez = $efq->execute();
  if (isset($rez['dh_adminreg_feature'])) {
    while ($f = array_shift($rez['dh_adminreg_feature']) ) {
      $fs[] = $f->adminid;
    }
  }
  return $fs;
}

function dh_adminreg_get_admin_location_entities($feature) {
  if (!$feature) {
    return FALSE;
  }
  if (!is_object($feature)) {
    $feature = entity_load_single('dh_feature', $feature);
  }
  if (!$feature) {
    return FALSE;
  }
  $prs = array();
  $prids = array();
  if (property_exists($feature, 'dh_link_admin_location') and is_array($feature->dh_link_admin_location['und'])) {
    foreach($feature->dh_link_admin_location['und'] as $one) {
      $prids[] = $one['target_id'];
    }
    
  }
  $prs = entity_load('dh_adminreg_feature', $prids);
  return $prs;
  
}

function dh_adminreg_get_admin_location($feature, $pr_bundle = FALSE, $pr_ftype = FALSE, $pr_auth = FALSE) {
  // returns first permit/registration matching criteria
  // @todo: build a wrapper around this to load all
  // load necessary permitting info for this event
  // if specifying bundle or ftype refers to the bundle/ftype of the target adminreg feature
  // if specifying auth, it refers to the authorizing authority of the permit/reg
  if (!$feature) {
    return FALSE;
  }
  if (!is_object($feature)) {
    $feature = entity_load_single('dh_feature', $feature);
  }
  if (!$feature) {
    return FALSE;
  }
  $prid = FALSE;
  $prs = dh_adminreg_get_admin_location_entities($feature);
  if (is_array($prs)) {
    foreach ($prs as $pr) {
      if (!$pr_bundle or ($pr->bundle == $pr_bundle)) {
        if (!$pr_ftype or ($pr->ftype == $pr_ftype)) {
          if (!$pr_auth) {
            $prid = $pr->adminid;
          } else {
            if ($pr_auth 
              and property_exists($pr, 'dh_link_admin_reg_issuer')
              and is_array($pr->dh_link_admin_reg_issuer['und'])
            ) {
              foreach($pr->dh_link_admin_reg_issuer['und'] as $one) {
                //dpm($one,"issuer = $pr_auth ??");
                if ($pr_auth == $one['target_id']) {
                  $prid = $pr->adminid;
                }
              }
            }
          }
        }
      }
    }
  }
  return $prid;
}
/**
  * Implements hook_views_api().
  */
function dh_adminreg_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dh_adminreg') . '/views',
  );
}

/**
  * Implements hook_ctools_plugin_api().
  */
function dh_adminreg_ctools_plugin_api($module = '', $api = '') {
  if ($module == "feeds" && $api == "feeds_importer_default") {
    // The current API version is 1.
    return array("version" => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dh_adminreg_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'access') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'om' && $plugin_type == 'om_components') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'dh' && $plugin_type == 'dh_variables') {
    return 'plugins/' . $plugin_type;
  }
}

function dh_adminreg_entity_ts_event_types_alter(&$event_types) {
  // insert ts events for AR fields/properties ()such as startdate, enddate, dh_link_submittal_feature) 
  // insert ts events for those linked via adminreg 
  //   system erefs like dh_link_submittal_feature
  $event_types += array(
    'dh_adminreg_feature' => array(
      'event_dha_default' => array(
        'bundle' => FALSE, // happens for all
        'entity_type' => 'dh_adminreg_feature',
        'multiplicity' => 'singular',
        'featureid' => array('value_src_type'=> 'property', 'value' => 'adminid'),
        'map' => array(
          // object permits sending an integer OR varkey to varid and controller figures it out
          'varid' => array('value_src_type'=> 'constant', 'value' => 'event_dha_default'),
          'tstime' => array('value_src_type'=> 'property', 'value' => 'startdate'),
          'tsendtime' => array('value_src_type'=> 'property', 'value' => 'enddate'),
          'tsvalue' => array('value_src_type' => 'constant', 'value' => NULL),
          'tscode' => array('value_src_type' => 'constant', 'value' => NULL),
        ),
      ),
//      'event_dh_link_submittal_feature' => array(
//        'bundle' => 'submittal', // happens for all
//        'entity_type' => 'dh_adminreg_feature',
//        'multiplicity' => 'singular',
//        'featureid' => array('value_src_type'=> 'property', 'value' => 'adminid'),
//        'map' => array(
//          // object permits sending an integer OR varkey to varid and controller figures it out
//          'varid' => array('value_src_type'=> 'constant', 'value' => 'event_dh_link_submittal_feature'),
//          'tstime' => array('value_src_type'=> 'property', 'value' => 'startdate'),
//          'tsendtime' => array('value_src_type'=> 'property', 'value' => 'enddate'),
//          'tsvalue' => array('value_src_type' => 'constant', 'value' => NULL),
////          'tscode' => array('value_src_type' => 'constant', 'value' => NULL),
//        ),
//      ),
    ),
  );
}

// @todo:
/* support entityconnect */
// buttons show up but form to pick entity type (add) or edit form are blank
/*
function dh_adminreg_entityconnect_ref_fields_alter(&$ref_fields) {
  foreach (field_info_fields() as $id => $field) {
    // Add support for dH implementations of the Entity reference module.
    if ($field['type'] == 'entityreference' && $field['module'] == 'entityreference') {
      $entity_reference_info = entityreference_get_selection_handler($field);
      $entity_type = $entity_reference_info->field['settings']['target_type'];
      $target_bundle = isset($entity_reference_info->field['settings']['handler_settings']['target_bundles']) ? $entity_reference_info->field['settings']['handler_settings']['target_bundles'] : NULL;

      switch ($entity_type) {

        case 'dh_adminreg_feature':
          // currently, system level create feature perms in dh do not extent to bundle level
          if (user_access('create dh_adminreg_feature entities') ) {
            $ref_fields[$id] = $field;
          }
          // so user can have broad entityconnect privileges also
          elseif (user_access('entityconnect add button') || user_access('entityconnect edit button')) {
            $ref_fields[$id] = $field;
          }
        break;
      }
    }
  }
}
*/
