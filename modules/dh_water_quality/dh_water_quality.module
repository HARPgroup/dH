<?php
// Create water quality form

function dh_water_quality_menu() {
  $items = array();
  $items['dh_water_quality/form'] = array(
    'title' => t('Water Quality Form'),
    'page callback' => 'dh_water_quality_form',
    'access arguments' => array('access content'),
    'description' => t('Water Quality Form'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function dh_water_quality_form() {
  return drupal_get_form('dh_water_quality_my_form');
}

function dh_water_quality_my_form($form_state) {

  //Create field for sample date and feature ID
    $form['sampledate'] = array(
    '#type' => 'date',
    '#title' => 'Sample Date',
    '#required' => TRUE, 
    );
    
    $form['featureid'] = array(
    '#type' => 'textfield',
    '#title' => 'Feature ID',
    '#required' => TRUE, 
    //'#disabled' => TRUE,
    //'#default_value' => '1',
    ); 
      
    //Create table format for form so it looks like the existing one
    $form['waterquality'] = array(
      '#prefix' => '<div id="waterquality">',
      '#suffix' => '</div>',
    '#tree' => TRUE,
      '#theme' => 'table',
      '#header' => array(t('Parameter'), t('Value'), t('BDL'), t('DL Value')),
      '#rows' => array(),
    );	
    
  //end create field for sample date and feature ID

  //Connect to database to get all the dh_variabledefition where data type is concentration and varkey has ended with _mgl or _num(for pH) 

  $conn = Database::getConnection();

  $dh_variable = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE (varkey LIKE :varkey1 OR varkey LIKE :varkey2) AND datatype LIKE :datatype ", array('varkey1' => '%_mgl%','varkey2' => '%_num%','datatype' => 'concentration'));	
  $data = $dh_variable->fetchAll();

  //Loop thourgh each record and create form
  foreach ($data as $record) {
    // Do something with each $record
    $variablename = $record ->varname;
    $unit = "";
    if (strpos($variablename, "_mgl") !== false) {
      $unit = "mgl";  
    }
    $variablename = str_replace("_mgl","",$variablename);
    $variablename = str_replace("_num","",$variablename);  
    $variablename_bdl = $variablename . "_bdl";
    $variablename_dl = $variablename . "_dl";  
    //Find varid for respected bdl and dl
    $dh_bdl = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE varname LIKE :varname", array('varname' => $variablename_bdl));  
    foreach ($dh_bdl as $record_bdl) {
      $hydroid_bdl = $record_bdl -> hydroid;  
    }
    
    $dh_dl = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE varname LIKE :varname", array('varname' => $variablename_dl));  
    foreach ($dh_dl as $record_dl) {
      $hydroid_dl = $record_dl -> hydroid;  
    }  
   
    if ($variablename != "ph") {
      $variablename = ucfirst($variablename);  
    }
    else{
      $variablename = "pH";  
    }
    $hydroid = $record -> hydroid;
    $tsinputname= "tsvalue" . $hydroid;  
    $bdlinputname = "bdl" . $hydroid_bdl;
    $dlinputname = "dl" . $hydroid_dl;   


    // Build the fields for this row in the table. We'll be adding
    // these to the form several times, so it's easier if they are
    // individual variables rather than in an array.
    
    $parameter = array(
      '#id' => $variablename,
  //    '#name' => $variablename,	
      '#type' => 'textfield',
      '#default_value' => $variablename,
    '#disabled' => TRUE,
    );
    
    $tsvalue = array(
      '#id' => $tsinputname,
  //    '#name' => $tsinputname,		
      '#type' => 'textfield',
    '#element_validate' => array('_check_valid_format'),
    );  
   
   
    if ($variablename == 'pH') {  

      // Include the fields so they'll be rendered and named
      // correctly, but they'll be ignored here when rendering as
      // we're using #theme => table.
      //
      // Note that we're using references to the variables, not just
      // copying the values into the array.    
      $form['waterquality'][] = array(
        'parameter' => &$parameter,
        'tsvalue' => &$tsvalue,
      );

      // Now add references to the fields to the rows that
      // `theme_table()` will use.
      //
      // As we've used references, the table will use the very same
      // field arrays as the FAPI used above. 	
      $form['waterquality']['#rows'][] = array(
        array('data' => $variablename),	
        array('data' => &$tsvalue),
        array('data' => ''),
        array('data' => ''),		
      );	
    }  else {  //for all other variables
      $bdl = array(
        '#id' => $bdlinputname,
    //    '#name' => $bdlinputname,		
        '#type' => 'checkbox',
      );  
      
      $dl = array(
        '#id' => $dlinputname,
    //    '#name' => $dlinputname,		
        '#type' => 'textfield',
      '#element_validate' => array('_check_valid_format'),	
      ); 
      
      
      $form['waterquality'][] = array(
        'parameter' => &$parameter,
        'tsvalue' => &$tsvalue,
        'bdl' => &$bdl,
        'dl' => &$dl,		
      );  
        
    
      $form['waterquality']['#rows'][] = array(
        array('data' => $variablename),
        array('data' => &$tsvalue),
        array('data' => &$bdl),
        array('data' => &$dl),		
      );
         
    }

   // Because we've used references we need to `unset()` our
    // variables. If we don't then every iteration of the loop will
    // just overwrite the variables we created the first time
    // through leaving us with a form with 3 copies of the same fields.
    unset($parameter);
    unset($tsvalue);
    unset($bdl);
    unset($dl);    	   
     
  }

  //end Loop

  //Submit Data	
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  
  return $form;
}

// Provides the first and last name fields to be required by using the 
// validation function to make sure values have been entered. This 
// causes the name fields to show up in red if left blank after clearing 
// the form with the "Reset form" button.
function dh_water_quality_my_form_validate($form, &$form_state) {
	
}

function _check_valid_format($element, &$form_state) {
  if (!empty($element['#value']) && (is_numeric($element['#value'])) && ($element['#value'] <0)) {
    form_error($element, t('This number must be greater than 0.'));
  }	
  if (!empty($element['#value']) && (!is_numeric($element['#value']))) {
    form_error($element, t('This field must be a number'));
  }		
}

function dh_water_quality_my_form_submit($form, &$form_state) {
//drupal_set_message("Form: " . print_r($form,1));
//drupal_set_message("Form State: " . print_r($form_state,1));
	$sampledate = mktime(0, 0, 0, $form_state['values']['sampledate']['month'], $form_state['values']['sampledate']['day'], $form_state['values']['sampledate']['year']);

	$featureid = $form_state['values']['featureid'];

  $dh_variable = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE varkey NOT LIKE :varkey1 AND varkey NOT LIKE :varkey2 AND datatype LIKE :datatype ", array('varkey1' => '%_dl%','varkey2' => '%_meqpl%','datatype' => 'concentration'));	
  $data = $dh_variable->fetchAll();
    $row = 0;
  foreach ($data as $record) {
    // Do something with each $record

    $variablename = $record ->varname;
    $unit = "";
    if (strpos($variablename, "_mgl") !== false) {
      $unit = "mgl";  
    }
    $variablename = str_replace("_mgl","",$variablename);
    $variablename = str_replace("_num","",$variablename);  
    
    $variablename_bdl = $variablename . "_bdl";
    $variablename_dl = $variablename . "_dl";  
    //Find varid for respected bdl and dl
    $dh_bdl = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE varname LIKE :varname", array('varname' => $variablename_bdl));  
    foreach ($dh_bdl as $record_bdl) {
     $hydroid_bdl = $record_bdl -> hydroid;  
    }
    
    $dh_dl = db_query("SELECT hydroid, varname, timeunits, vardesc, varunits FROM {dh_variabledefinition} WHERE varname LIKE :varname", array('varname' => $variablename_dl));  
    foreach ($dh_dl as $record_dl) {
     $hydroid_dl = $record_dl -> hydroid;  
    }  

    $hydroid = $record -> hydroid;
    
    //get value from form
    $tsvalueinsert = $form_state['values']['waterquality'][$row]['tsvalue'];
    if ($variablename != "ph") {  
    $bdlvalueinsert = $form_state['values']['waterquality'][$row]['bdl'];	
    $dlvalueinsert = $form_state['values']['waterquality'][$row]['dl'];  
    }
    //insert value into database
    if($tsvalueinsert >0) {
    $tsvalue = db_insert('dh_timeseries')
      ->fields(array(
      'utcoffset' => '0',
      'tsvalue' => $tsvalueinsert,
      'tstime' => $sampledate,
      'varid' => $hydroid,
      'featureid' => $featureid,
    ))
    ->execute();
    }
    if ($variablename != "ph") {
      if($bdlvalueinsert >0) {
      $tsvalue = db_insert('dh_timeseries')
        ->fields(array(
        'utcoffset' => '0',
        'tsvalue' => $bdlvalueinsert,
        'tstime' => $sampledate,
        'varid' => $hydroid_bdl,
        'featureid' => $featureid,
      ))
      ->execute();
      }
    
      if($dlvalueinsert >0) {
      $tsvalue = db_insert('dh_timeseries')
        ->fields(array(
        'utcoffset' => '0',
        'tsvalue' => $dlvalueinsert,
        'tstime' => $sampledate,
        'varid' => $hydroid_dl,
        'featureid' => $featureid,
      ))
      ->execute();
      }	
    }
    $row += 1;  
  }
  drupal_set_message(t('The form has been submitted.'));
}

//end water quality form
?>